import bpy
import bmesh
import math
from mathutils import Vector

# 스크립트는 반드시 에디트 모드에서 실행해야 합니다.
if bpy.context.mode == 'EDIT_MESH':
    # 현재 에디트 중인 오브젝트와 메쉬 데이터에 접근합니다.
    obj = bpy.context.edit_object
    me = obj.data
    bm = bmesh.from_edit_mesh(me)

    # 마지막으로 선택한 면(활성 면)을 가져옵니다.
    face = bm.select_history.active
    
    # 선택된 요소가 면(Face)인지 확인합니다.
    if face and isinstance(face, bmesh.types.BMFace):
        
        # 1. 월드 좌표계 기준 노멀 벡터 계산
        # 오브젝트의 회전을 고려하여 로컬 노멀을 월드 노멀로 변환하고,
        # 크기를 1로 정규화(normalize)합니다.
        world_normal = (obj.matrix_world.to_3x3() @ face.normal).normalized()
        
        nx, ny, nz = world_normal.x, world_normal.y, world_normal.z
        
        # 2. 구면 좌표계 각도 계산
        
        # 고도각 (Theta, θ): Z축과의 각도입니다. (0°가 Z축 방향)
        # math.acos()는 라디안 값을 반환합니다.
        theta_rad = math.acos(nz)
        
        # 방위각 (Phi, φ): XY평면에서 X축과의 각도입니다.
        # math.atan2(y, x)를 사용하면 모든 사분면의 각도를 정확히 계산할 수 있습니다.
        phi_rad = math.atan2(ny, nx)
        
        # 3. 라디안을 디그리로 변환
        theta_deg = math.degrees(theta_rad)
        phi_deg = math.degrees(phi_rad)
        
        # 방위각(phi)의 범위를 0° ~ 360°로 조정합니다.
        if phi_deg < 0:
            phi_deg += 360
            
        # 4. 결과 출력
        print("-" * 50)
        print(f"선택된 면의 월드 노멀 벡터: ({nx:.3f}, {ny:.3f}, {nz:.3f})")
        print("\n[ 구면 좌표계 각도 ]")
        print(f"  - 고도각 (Theta, θ): {theta_deg:.3f}°")
        print(f"    (Z축 방향을 0°로 했을 때, 아래로 내려오는 각도)")
        print(f"  - 방위각 (Phi, φ):   {phi_deg:.3f}°")
        print(f"    (XY평면에서 X축 기준 반시계 방향 각도)")
        print("-" * 50)

    else:
        print("선택된 면이 없습니다. 에디트 모드에서 면을 하나 선택해주세요.")
else:
    print("스크립트를 실행하려면 에디트 모드여야 합니다.")
